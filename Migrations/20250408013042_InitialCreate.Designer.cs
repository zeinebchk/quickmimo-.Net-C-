// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using quickmimo.context;

#nullable disable

namespace quickmimo.Migrations
{
    [DbContext(typeof(DBMimoContext))]
    [Migration("20250408013042_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

            modelBuilder.Entity("quickmimo.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("quickmimo.Entities.MYTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("RememeberNotification")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ddeadline")
                        .HasColumnType("TEXT");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("servings")
                        .HasColumnType("INTEGER");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("userId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("userId");

                    b.ToTable("tasks");
                });

            modelBuilder.Entity("quickmimo.Entities.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("FileData")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<int>("Rappel")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("categotyId")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("dateEvent")
                        .HasColumnType("TEXT");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("userId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("categotyId");

                    b.HasIndex("userId");

                    b.ToTable("notes");
                });

            modelBuilder.Entity("quickmimo.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("password")
                        .HasColumnType("TEXT");

                    b.Property<string>("proffession")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("quickmimo.Entities.MYTask", b =>
                {
                    b.HasOne("quickmimo.Entities.User", "user")
                        .WithMany("tasks")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("user");
                });

            modelBuilder.Entity("quickmimo.Entities.Note", b =>
                {
                    b.HasOne("quickmimo.Entities.Category", "category")
                        .WithMany("notes")
                        .HasForeignKey("categotyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("quickmimo.Entities.User", "user")
                        .WithMany("notes")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("category");

                    b.Navigation("user");
                });

            modelBuilder.Entity("quickmimo.Entities.Category", b =>
                {
                    b.Navigation("notes");
                });

            modelBuilder.Entity("quickmimo.Entities.User", b =>
                {
                    b.Navigation("notes");

                    b.Navigation("tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
